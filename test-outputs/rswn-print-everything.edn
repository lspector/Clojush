#clojush/run{:age-combining-function :average, :age-mediated-parent-selection false, :alignment-deviation 10, :alternation-rate 0.01, :autoconstructive false, :autoconstructive-boolean-rand-enrichment 0, :autoconstructive-clone-probability 0.0, :autoconstructive-decay 0.0, :autoconstructive-diffmeans-children 10, :autoconstructive-diversification-test :gecco2016, :autoconstructive-environments false, :autoconstructive-genome-instructions :all, :autoconstructive-integer-rand-enrichment 0, :autoconstructive-parent-decay 0.0, :autoconstructive-si-children 8, :autoconstructive-tag-types [:integer :boolean :exec :float :char :string :code], :close-increment-rate 0.2, :close-parens-probabilities [0.772 0.206 0.021 0.001], :csv-columns [:generation :location :parent-uuids :genetic-operators :push-program-size :plush-genome-size :push-program :plush-genome :total-error :test-case-errors], :csv-log-filename "xxx", :decimation-ratio 1, :decimation-tournament-size 2, :edn-additional-keys [:generation :location :push-program-size :plush-genome-size], :edn-keys [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors], :edn-log-filename "xxx", :epigenetic-markers [:close], :epsilon-lexicase-epsilon nil, :epsilon-lexicase-probability 1, :error-threshold 0, :evalpush-limit 1600, :evalpush-time-limit 0, :exit-on-success true, :final-report-simplifications 5000, :genetic-operator-probabilities {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}, :improvement-discount 0.5, :individuals-for-novelty-archive-per-generation 0, :json-log-filename "xxx", :json-log-program-strings true, :label nil, :lexicase-leakage 0.1, :lexicase-slippage 0, :log-fitnesses-for-all-cases true, :maintain-ancestors true, :max-error 5000, :max-generations 0, :max-genome-size-in-initial-program 400, :max-point-evaluations 1.0E101, :max-points 3200, :meta-error-categories [], :normalization :none, :novelty-distance-metric :euclidean, :novelty-number-of-neighbors-k 25, :parent-reversion-probability 1.0, :parent-selection :lexicase, :pop-when-tagging true, :population-size 5, :print-ancestors-of-solution false, :print-cosmos-data true, :print-csv-logs true, :print-edn-logs true, :print-error-frequencies-by-case true, :print-errors false, :print-history true, :print-homology-data true, :print-json-logs true, :print-selection-counts false, :print-timings true, :problem-specific-initial-report #object[xxx], :random-screen false, :random-threshold-lexicase-probability 1, :record-host nil, :replace-child-that-exceeds-size-limit-with :random, :report-simplifications 0, :return-simplified-on-failure false, :reuse-errors true, :run-uuid #uuid "00000000-0000-0000-0000-000000000000", :self-mate-avoidance-limit 0, :silent-instruction-probability 0.2, :tag-enrichment 0, :tag-enrichment-types [:integer :boolean :exec :float :char :string :code], :tag-limit 10000, :top-level-pop-code false, :top-level-push-code false, :total-error-method :sum, :tournament-size 7, :track-instruction-maps false, :uniform-addition-and-deletion-rate 0.01, :uniform-addition-rate 0.01, :uniform-close-mutation-rate 0.1, :uniform-combination-and-deletion-rate 0.01, :uniform-deletion-rate 0.01, :uniform-mutation-constant-tweak-rate 0.5, :uniform-mutation-float-gaussian-standard-deviation 1.0, :uniform-mutation-int-gaussian-standard-deviation 1, :uniform-mutation-rate 0.01, :uniform-mutation-string-char-change-rate 0.1, :uniform-mutation-tag-gaussian-standard-deviation 100, :uniform-silence-mutation-rate 0.1, :use-single-thread true}
#clojush/individual{:plush-genome-size 264, :errors [0 169 1 168 1 168 1 169 1 168 2 168 2 169 2 168 2 167 2 167 2 167 2 167 3 168 3 167 3 166 3 168 3 169 3 168 3 167 3 167 3 167 3 166 3 166 4 167 5 168 5 164 5 164 5 164 5 164 6 165 7 168 7 163 7 163 7 164 7 163 7 163 8 162 8 163 8 161 8 163 9 161 9 163 9 162 9 162 9 161 9 163 9 162 10 160 10 160 11 162 11 160 11 159 11 160 11 160 11 161 11 161 11 159 12 161 12 161 12 159 13 160 14 156 14 159 14 161 14 159 15 154 15 157 15 157 15 156 15 157 15 157 15 158 15 157 15 159 16 157 16 157 16 157 17 159 17 155 17 157 17 157 17 155 18 154 18 157 18 154 18 157 19 154 19 154 20 149 20 169 20 149 20 159 20 159 20 155 20 154 20 149 20 149 20 154 20 151 20 153], :genetic-operators :random, :generation 0, :push-program-size 301, :total-error 17155, :genome [{:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 1, :instruction string_replacefirst} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction char_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction char_dup_times} {:close 1, :instruction char_frominteger} {:close 0, :instruction integer_inc} {:close 2, :instruction string_nth} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_swap} {:close 0, :instruction string_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction string_stackdepth} {:close 1, :instruction exec_swap} {:close 1, :instruction string_split} {:close 0, :instruction boolean_eq} {:close 0, :instruction char_isletter} {:close 0, :instruction boolean_pop} {:close 0, :instruction \space} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction string_length} {:close 0, :instruction integer_mult} {:close 1, :instruction tagged_891} {:close 1, :instruction exec_pop} {:close 1, :instruction string_indexofchar} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_concat} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_fromchar} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction boolean_or} {:close 0, :instruction string_contains} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction char_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction string_take} {:close 0, :instruction string_emptystring} {:close 1, :instruction string_stackdepth} {:close 1, :instruction char_eq} {:close 0, :instruction char_flush} {:close 0, :instruction string_concat} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction string_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction string_substring} {:close 0, :instruction string_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction string_conjchar} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction char_rot} {:close 0, :instruction exec_while} {:close 1, :instruction exec_rot} {:close 0, :instruction string_yankdup} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_dup} {:close 1, :instruction string_shove} {:close 0, :instruction string_length} {:close 0, :instruction char_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_replacefirst} {:close 0, :instruction string_dup_times} {:close 1, :instruction char_dup_items} {:close 0, :instruction string_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction char_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction char_swap} {:close 0, :instruction string_occurrencesofchar} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction string_concat} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction char_dup_items} {:close 0, :instruction exec_string_iterate} {:close 1, :instruction string_split} {:close 0, :instruction string_dup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction exec_rot} {:close 0, :instruction char_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction \newline} {:close 0, :instruction char_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction integer_gt} {:close 0, :instruction tag_boolean_87} {:close 0, :instruction char_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction string_dup_times} {:close 1, :instruction exec_do*count} {:close 1, :instruction char_dup_times} {:close 0, :instruction tagged_691} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromchar} {:close 0, :instruction integer_max} {:close 0, :instruction string_last} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction string_contains} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_take} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 0, :instruction char_frominteger} {:close 1, :instruction tag_boolean_229} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction \space} {:close 1, :instruction integer_flush} {:close 0, :instruction char_dup_items} {:close 0, :instruction print_char} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction char_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_yankdup} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction char_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_string_iterate} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction string_frominteger} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction integer_fromchar} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction char_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction print_string} {:close 0, :instruction exec_eq} {:close 1, :instruction string_take} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction string_replacefirst} {:close 0, :instruction char_flush} {:close 1, :instruction string_replace} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_fromstring} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 2, :instruction string_conjchar} {:close 1, :instruction \U} {:close 0, :instruction string_dup_times} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction \3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction char_allfromstring} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirstchar} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction char_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_butlast} {:close 0, :instruction string_concat} {:close 1, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_eq} {:close 0, :instruction char_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_take} {:close 0, :instruction integer_dup}], :uuid #uuid "00000000-0000-0000-0000-000000000000", :location 0, :program (exec_shove (integer_min string_replacefirst) boolean_or boolean_dup_times string_stackdepth exec_stackdepth char_stackdepth integer_dup exec_do*range (exec_stackdepth) integer_min exec_when (char_dup_times char_frominteger) integer_inc string_nth string_emptystring integer_swap string_pop string_setchar string_stackdepth exec_swap () (string_split) boolean_eq char_isletter boolean_pop \space boolean_invert_first_then_and exec_dup_times (exec_when (string_length) integer_mult tagged_891) exec_pop () string_indexofchar integer_yank boolean_flush print_boolean boolean_yank integer_inc integer_max integer_gte boolean_pop string_concat integer_dup boolean_frominteger exec_empty string_setchar integer_fromchar exec_yank string_parse_to_chars boolean_or string_contains exec_flush integer_swap integer_lte integer_dec char_isdigit integer_dup_items integer_pop string_shove exec_dup (char_yank string_yankdup exec_pop (string_take string_emptystring string_stackdepth) char_eq) char_flush string_concat exec_stackdepth string_fromboolean exec_yankdup print_integer string_replacefirstchar integer_rot boolean_dup string_substring string_dup_times print_boolean integer_stackdepth exec_y (string_conjchar) exec_pop (integer_shove boolean_invert_second_then_and) exec_do*times () integer_lt boolean_invert_first_then_and exec_flush integer_yank integer_fromchar integer_mod boolean_flush char_rot exec_while (exec_rot () (string_yankdup string_indexofchar integer_dup string_shove) (string_length char_rot exec_empty integer_fromchar string_dup_times boolean_yank exec_do*while (string_replacefirst string_dup_times char_dup_items) string_rest integer_yankdup exec_dup_times (char_eq) integer_mod char_swap) string_occurrencesofchar boolean_frominteger) exec_eq string_concat string_empty boolean_flush char_dup_items exec_string_iterate (string_split) string_dup char_iswhitespace exec_rot (char_shove exec_dup (\newline char_yankdup boolean_xor string_fromchar integer_empty boolean_dup_times boolean_yank integer_mult char_iswhitespace integer_gt) tag_boolean_87 char_flush exec_shove (boolean_not exec_do*times (exec_dup_times () in1) exec_stackdepth)) (integer_flush) (string_dup_times exec_do*count () char_dup_times) tagged_691 print_newline boolean_frominteger integer_sub integer_min boolean_dup_items boolean_eq boolean_dup integer_mult integer_fromchar integer_max string_last boolean_invert_first_then_and string_occurrencesofchar string_contains integer_yankdup string_take exec_k (integer_mult char_frominteger tag_boolean_229) (integer_stackdepth \space integer_flush) char_dup_items print_char boolean_yankdup integer_mod integer_lt print_boolean char_empty integer_inc string_replacefirst char_yankdup string_replacefirstchar char_pop exec_stackdepth exec_do*times (exec_string_iterate (integer_empty) integer_gt string_frominteger) string_occurrencesofchar integer_fromchar boolean_eq integer_lte char_pop integer_pop integer_lt print_string exec_eq string_take integer_min exec_flush integer_pop string_contains integer_dec integer_fromboolean string_replacefirst char_flush string_replace string_indexofchar integer_fromstring boolean_eq exec_stackdepth integer_inc string_conjchar \U string_dup_times string_replacefirstchar string_replacefirstchar \3 integer_min integer_yankdup print_integer exec_y (string_parse_to_chars string_replacefirstchar boolean_dup_times boolean_swap char_allfromstring integer_mod exec_when (string_replacefirstchar boolean_frominteger) print_boolean integer_dup_times exec_eq exec_dup (boolean_stackdepth char_dup integer_mod string_replacefirstchar string_butlast string_concat integer_lte) print_exec (integer_dup_times integer_gt integer_eq char_yankdup integer_dup_items string_eq char_rot boolean_invert_first_then_and) boolean_swap boolean_swap string_take integer_dup)), :parent-uuids nil}
#clojush/individual{:plush-genome-size 302, :errors [0 1000 1 1000 1 1000 1 1000 1 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 4 1000 5 1000 5 1000 5 1000 5 1000 5 1000 6 1000 7 1000 7 1000 7 1000 7 1000 7 1000 7 1000 8 1000 8 1000 8 1000 8 1000 9 1000 9 1000 9 1000 9 1000 9 1000 9 1000 9 1000 10 1000 10 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 12 1000 12 1000 12 1000 13 1000 14 1000 14 1000 14 1000 14 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 16 1000 16 1000 16 1000 17 1000 17 1000 17 1000 17 1000 17 1000 18 1000 18 1000 18 1000 18 1000 19 1000 19 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000], :genetic-operators :random, :generation 0, :push-program-size 343, :total-error 101054, :genome [{:close 0, :instruction integer_max} {:close 0, :instruction string_removechar} {:close 0, :instruction boolean_shove} {:close 1, :instruction string_take} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction string_contains} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction string_first} {:close 0, :instruction string_butlast} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction string_fromboolean} {:close 1, :instruction char_shove} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_setchar} {:close 0, :instruction string_reverse} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction char_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction string_shove} {:close 0, :instruction char_empty} {:close 0, :instruction string_reverse} {:close 0, :instruction integer_shove} {:close 0, :instruction print_char} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_and} {:close 0, :instruction string_removechar} {:close 1, :instruction string_occurrencesofchar} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction string_empty} {:close 1, :instruction integer_fromchar} {:close 1, :instruction string_take} {:close 0, :instruction string_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromchar} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction char_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction string_concat} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction string_substring} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction string_concat} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction string_eq} {:close 1, :instruction string_nth} {:close 0, :instruction char_dup} {:close 1, :instruction string_yank} {:close 0, :instruction string_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 1, :instruction string_frominteger} {:close 0, :instruction string_dup} {:close 0, :instruction string_containschar} {:close 0, :instruction string_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_concat} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_last} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction char_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction string_containschar} {:close 1, :instruction string_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_max} {:close 0, :instruction string_empty} {:close 2, :instruction char_pop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_max} {:close 0, :instruction char_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction \newline} {:close 0, :instruction print_exec} {:close 0, :instruction string_replace} {:close 0, :instruction integer_mod} {:close 0, :instruction \newline} {:close 0, :instruction integer_dup} {:close 0, :instruction string_concat} {:close 0, :instruction char_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_div} {:close 0, :instruction string_conjchar} {:close 1, :instruction char_dup_items} {:close 0, :instruction string_indexofchar} {:close 0, :instruction char_rot} {:close 0, :instruction char_dup_times} {:close 0, :instruction string_eq} {:close 0, :instruction string_emptystring} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction string_containschar} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction char_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 2, :instruction string_conjchar} {:close 0, :instruction boolean_and} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup_items} {:close 0, :instruction char_isletter} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction string_conjchar} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction string_rest} {:close 0, :instruction string_contains} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction string_contains} {:close 0, :instruction string_swap} {:close 1, :instruction char_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_pop} {:close 0, :instruction integer_fromchar} {:close 0, :instruction char_yankdup} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 2, :instruction string_eq} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_frominteger} {:close 0, :instruction char_allfromstring} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 1, :instruction string_replacechar} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction char_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction char_rot} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_fromchar} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_rot} {:close 0, :instruction integer_fromchar} {:close 0, :instruction exec_rot} {:close 0, :instruction string_replacechar} {:close 1, :instruction print_exec} {:close 0, :instruction string_emptystring} {:close 0, :instruction string_containschar} {:close 1, :instruction string_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction string_split} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction char_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_setchar} {:close 0, :instruction string_length} {:close 0, :instruction tag_integer_438} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction char_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_if} {:close 1, :instruction char_dup} {:close 0, :instruction print_string} {:close 0, :instruction print_char} {:close 0, :instruction integer_max} {:close 1, :instruction string_nth} {:close 0, :instruction integer_sub} {:close 0, :instruction char_dup_items} {:close 0, :instruction char_frominteger} {:close 0, :instruction char_stackdepth} {:close 1, :instruction print_string} {:close 0, :instruction string_dup} {:close 0, :instruction string_yank} {:close 0, :instruction \k} {:close 1, :instruction char_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction string_length} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction string_rot} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_contains} {:close 1, :instruction char_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_325} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_rest} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction char_pop} {:close 0, :instruction "N"} {:close 0, :instruction string_eq} {:close 0, :instruction print_char} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromchar} {:close 0, :instruction exec_rot} {:close 0, :instruction string_emptystring} {:close 0, :instruction string_indexofchar} {:close 0, :instruction integer_div} {:close 0, :instruction " cM0"} {:close 1, :instruction \newline} {:close 0, :instruction \space} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction char_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 1, :instruction char_dup} {:close 1, :instruction char_eq} {:close 0, :instruction tag_integer_645} {:close 0, :instruction integer_rot} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction char_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction "_1<%WAu"} {:close 0, :instruction string_swap} {:close 0, :instruction string_length} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_contains} {:close 1, :instruction integer_min} {:close 0, :instruction \space} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction string_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction string_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_replace} {:close 0, :instruction char_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction string_containschar}], :uuid #uuid "00000000-0000-0000-0000-000000000000", :location 1, :program (integer_max string_removechar boolean_shove string_take integer_pop exec_do*count (print_integer string_yank integer_stackdepth boolean_yankdup integer_eq boolean_shove string_contains) integer_dup_times integer_mod boolean_dup_times integer_dup integer_flush string_first string_butlast print_integer boolean_rot string_fromboolean char_shove char_iswhitespace string_setchar string_reverse char_iswhitespace char_swap exec_empty exec_shove (exec_do*count (integer_rot boolean_or string_shove char_empty string_reverse integer_shove print_char string_replacefirst boolean_and string_removechar string_occurrencesofchar) exec_shove (integer_pop string_empty integer_fromchar) string_take) string_dup_times boolean_pop integer_swap integer_fromchar exec_dup_times (exec_yankdup) integer_lt char_dup boolean_dup_times string_concat char_iswhitespace string_substring exec_yank boolean_rot string_concat exec_shove (boolean_not exec_eq string_eq string_nth) char_dup string_yank string_eq exec_stackdepth string_yank boolean_not exec_empty string_frominteger string_dup string_containschar string_flush exec_shove () boolean_xor string_concat boolean_invert_first_then_and exec_yankdup string_last boolean_yankdup exec_y (char_pop integer_eq string_containschar) string_frominteger integer_min boolean_invert_second_then_and integer_max string_empty char_pop integer_fromstring exec_y (in1) integer_eq exec_while (char_stackdepth string_frominteger boolean_yank integer_max) char_rot exec_do*range (\newline print_exec (string_replace integer_mod \newline integer_dup string_concat char_flush integer_empty integer_gte integer_eq integer_div)) string_conjchar char_dup_items string_indexofchar char_rot char_dup_times string_eq string_emptystring boolean_or integer_sub exec_do*count (string_containschar exec_eq boolean_pop boolean_empty char_dup_items integer_fromboolean integer_lte) string_conjchar boolean_and string_replacefirst exec_dup_items char_isletter integer_yankdup exec_do*count () string_conjchar boolean_rot boolean_dup integer_shove string_rest string_contains boolean_xor integer_swap boolean_yank integer_stackdepth exec_flush exec_pop (string_contains) string_swap char_pop boolean_frominteger boolean_yankdup string_pop integer_fromchar char_yankdup integer_dup_times boolean_dup_items integer_sub integer_eq exec_do*times (boolean_pop string_eq) integer_fromchar string_stackdepth string_frominteger char_allfromstring exec_if (integer_flush integer_gt) (string_replacechar) boolean_rot integer_pop char_shove exec_rot () (char_rot boolean_shove) (integer_fromchar) integer_empty exec_when (exec_do*while (string_rot integer_fromchar exec_rot (string_replacechar print_exec () string_emptystring string_containschar string_flush) (print_boolean) (integer_mult integer_add) integer_yankdup integer_fromstring integer_yankdup boolean_pop string_split) boolean_frominteger) char_dup_times integer_dup exec_k (exec_yank) () integer_pop boolean_pop string_setchar string_length tag_integer_438 exec_do*count (exec_k () (boolean_eq integer_stackdepth char_dup_items integer_min) integer_max exec_flush string_conjchar string_removechar integer_swap integer_max) exec_if (char_dup) (print_string print_char integer_max string_nth) integer_sub char_dup_items char_frominteger char_stackdepth print_string string_dup string_yank \k char_flush integer_fromboolean boolean_empty string_length integer_rot exec_yank exec_do*while (string_rot string_stackdepth string_contains char_eq) boolean_invert_first_then_and boolean_shove integer_gt tagged_325 boolean_dup string_rest string_replacechar exec_stackdepth char_pop "N" string_eq print_char exec_k (integer_fromchar exec_rot (string_emptystring string_indexofchar integer_div " cM0" \newline) (\space exec_flush in1 char_shove) (exec_yankdup integer_empty) char_dup) (char_eq) tag_integer_645 integer_rot string_replacefirstchar char_pop exec_stackdepth "_1<%WAu" string_swap string_length integer_fromchar string_contains integer_min \space integer_inc boolean_frominteger in1 string_dup_times boolean_flush string_pop boolean_pop string_replace char_pop exec_empty string_containschar), :parent-uuids nil}
#clojush/individual{:plush-genome-size 326, :errors [0 0 1 1 1 1 1 0 1 1 2 1 2 0 2 1 2 2 2 2 2 2 2 2 3 1 3 2 3 3 3 1 3 0 3 1 3 2 3 2 3 2 3 3 3 3 4 2 5 1 5 5 5 5 5 5 5 5 6 4 7 1 7 6 7 6 7 5 7 6 7 6 8 7 8 6 8 8 8 6 9 8 9 6 9 7 9 7 9 8 9 6 9 7 10 9 10 9 11 7 11 9 11 10 11 9 11 9 11 8 11 8 11 10 12 8 12 8 12 10 13 9 14 13 14 10 14 8 14 10 15 15 15 12 15 12 15 13 15 12 15 12 15 11 15 12 15 10 16 12 16 12 16 12 17 10 17 14 17 12 17 12 17 14 18 15 18 12 18 15 18 12 19 15 19 15 20 20 20 0 20 20 20 10 20 10 20 14 20 15 20 20 20 20 20 15 20 18 20 16], :genetic-operators :random, :generation 0, :push-program-size 385, :total-error 1853, :genome [{:close 0, :instruction string_last} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromchar} {:close 0, :instruction exec_empty} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction string_occurrencesofchar} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction string_substring} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction string_concat} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_pop} {:close 0, :instruction char_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction string_last} {:close 0, :instruction exec_while} {:close 0, :instruction string_substring} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in1} {:close 2, :instruction string_replacechar} {:close 0, :instruction string_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction string_reverse} {:close 0, :instruction string_flush} {:close 0, :instruction string_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction tagged_159} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction print_string} {:close 0, :instruction char_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction string_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction char_rot} {:close 1, :instruction string_containschar} {:close 0, :instruction string_nth} {:close 1, :instruction exec_shove} {:close 0, :instruction string_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction string_swap} {:close 0, :instruction char_empty} {:close 1, :instruction string_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_conjchar} {:close 0, :instruction exec_do*count} {:close 0, :instruction string_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction string_yank} {:close 0, :instruction \space} {:close 0, :instruction string_containschar} {:close 0, :instruction string_dup} {:close 0, :instruction print_char} {:close 0, :instruction char_eq} {:close 0, :instruction string_fromchar} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction string_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction string_last} {:close 0, :instruction char_rot} {:close 0, :instruction string_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_pop} {:close 1, :instruction string_rot} {:close 0, :instruction string_frominteger} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction string_conjchar} {:close 1, :instruction exec_do*times} {:close 0, :instruction string_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction string_removechar} {:close 1, :instruction char_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction string_length} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction integer_fromchar} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction string_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 1, :instruction string_replacefirst} {:close 1, :instruction string_last} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction string_substring} {:close 1, :instruction exec_noop} {:close 0, :instruction string_butlast} {:close 0, :instruction tag_integer_481} {:close 0, :instruction string_yank} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_string} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_allfromstring} {:close 0, :instruction print_string} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 1, :instruction string_replacefirst} {:close 2, :instruction string_containschar} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction string_length} {:close 0, :instruction string_last} {:close 0, :instruction integer_sub} {:close 0, :instruction string_dup} {:close 0, :instruction string_rest} {:close 0, :instruction char_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 2, :instruction char_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction string_indexofchar} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction char_isdigit} {:close 0, :instruction exec_yankdup} {:close 2, :instruction tag_integer_923} {:close 2, :instruction boolean_yank} {:close 1, :instruction char_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_rot} {:close 0, :instruction string_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction string_conjchar} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction char_shove} {:close 1, :instruction char_isdigit} {:close 1, :instruction char_dup} {:close 0, :instruction string_nth} {:close 1, :instruction integer_rot} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction \:} {:close 0, :instruction boolean_not} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_inc} {:close 1, :instruction string_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction char_flush} {:close 0, :instruction in1} {:close 0, :instruction ";nwtQkR  "} {:close 0, :instruction print_boolean} {:close 2, :instruction string_dup_times} {:close 0, :instruction string_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction string_empty} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 0, :instruction string_containschar} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction print_exec} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction string_contains} {:close 0, :instruction string_fromboolean} {:close 0, :instruction "r 7(@L SIph0 "} {:close 1, :instruction exec_pop} {:close 0, :instruction tagged_833} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction string_first} {:close 0, :instruction char_iswhitespace} {:close 2, :instruction integer_max} {:close 0, :instruction print_char} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction char_dup_times} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction integer_min} {:close 0, :instruction char_dup_times} {:close 0, :instruction char_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction char_stackdepth} {:close 0, :instruction string_eq} {:close 2, :instruction integer_fromchar} {:close 0, :instruction string_take} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction char_isletter} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction char_flush} {:close 0, :instruction print_char} {:close 0, :instruction tagged_833} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction string_replacefirst} {:close 0, :instruction boolean_and} {:close 1, :instruction char_dup_times} {:close 0, :instruction string_shove} {:close 1, :instruction char_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_char} {:close 0, :instruction char_shove} {:close 0, :instruction string_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction char_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_lte} {:close 2, :instruction \newline} {:close 0, :instruction char_flush} {:close 0, :instruction char_allfromstring} {:close 0, :instruction \space} {:close 0, :instruction integer_swap} {:close 0, :instruction char_frominteger} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_items} {:close 0, :instruction string_nth} {:close 0, :instruction boolean_shove} {:close 0, :instruction char_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction "S [+{d<"} {:close 0, :instruction string_replace} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction string_setchar} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction string_first} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction \newline} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_swap} {:close 0, :instruction string_empty} {:close 0, :instruction string_frominteger} {:close 1, :instruction string_length} {:close 0, :instruction exec_yankdup}], :uuid #uuid "00000000-0000-0000-0000-000000000000", :location 2, :program (string_last string_stackdepth exec_y (boolean_or) boolean_dup_items exec_dup_items integer_empty integer_fromchar exec_empty string_parse_to_chars integer_div boolean_rot integer_mult string_occurrencesofchar exec_yankdup print_newline string_substring boolean_stackdepth string_concat char_iswhitespace string_pop char_rot exec_shove (integer_yank string_last exec_while (string_substring boolean_frominteger in1) string_replacechar) string_dup_items integer_min string_swap boolean_or boolean_swap exec_string_iterate (string_reverse string_flush string_pop integer_sub tagged_159) boolean_yank print_exec (exec_while () boolean_not print_string char_flush boolean_eq) string_dup_times print_boolean char_rot string_containschar string_nth exec_shove () string_empty exec_empty exec_shove (string_swap char_empty string_empty) exec_swap (boolean_swap string_conjchar exec_do*count (string_dup_items integer_fromboolean exec_swap (integer_rot) (string_yank \space string_containschar string_dup print_char char_eq string_fromchar exec_dup_items integer_flush boolean_yankdup string_stackdepth) integer_swap string_rot exec_when () exec_empty exec_pop (string_last char_rot string_yank exec_shove (boolean_eq string_pop string_rot) string_frominteger exec_yankdup) exec_do*count (integer_mult string_conjchar) exec_do*times () string_yank integer_pop exec_when (integer_yank integer_mult boolean_dup_times boolean_not) integer_fromboolean) integer_add) (boolean_dup_times print_integer integer_div exec_while (string_removechar char_dup_times) integer_fromboolean exec_do*count () integer_add integer_sub string_length string_replacefirst boolean_dup_items integer_sub boolean_stackdepth) integer_fromchar exec_empty boolean_swap exec_shove (string_empty exec_pop () boolean_not exec_empty string_replacefirst) string_last boolean_dup_times integer_mult string_substring exec_noop string_butlast tag_integer_481 string_yank exec_while () integer_stackdepth print_string exec_eq exec_do*times (char_allfromstring print_string integer_div integer_yank string_replacefirst) string_containschar boolean_invert_first_then_and exec_s (integer_eq) (integer_lte string_length string_last integer_sub string_dup string_rest char_yank boolean_xor) (exec_swap (char_yank) () exec_empty string_indexofchar boolean_stackdepth exec_swap () (exec_shove (exec_noop integer_dup_items integer_dup_items) print_newline integer_div exec_pop (integer_dup) char_isdigit exec_yankdup tag_integer_923)) boolean_yank char_yank string_dup integer_stackdepth exec_dup_items string_rot string_dup integer_yank string_conjchar boolean_yank integer_add print_integer char_shove char_isdigit char_dup string_nth integer_rot string_parse_to_chars integer_pop exec_do*while (\:) boolean_not string_removechar integer_flush integer_inc exec_while () boolean_dup_items integer_inc string_rot exec_y () boolean_pop exec_pop (integer_swap exec_s () (boolean_dup_times string_dup_times integer_rot exec_do*while (char_flush in1 ";nwtQkR  " print_boolean string_dup_times)) (string_shove integer_swap string_empty string_occurrencesofchar exec_y (integer_shove) string_containschar integer_add) boolean_flush) char_isdigit integer_fromstring integer_dup_times integer_rot integer_shove print_exec () string_parse_to_chars string_contains string_fromboolean "r 7(@L SIph0 " exec_pop () tagged_833 exec_s (integer_lte string_first char_iswhitespace integer_max) () (print_char boolean_yankdup char_dup_times) char_iswhitespace integer_min char_dup_times char_dup_times boolean_dup boolean_stackdepth boolean_dup_items exec_when (char_stackdepth) string_eq integer_fromchar string_take exec_k (exec_do*times (char_isletter string_stackdepth in1 boolean_pop exec_do*while (char_flush print_char tagged_833 integer_shove integer_gte string_replacefirst) boolean_and char_dup_times) string_shove char_yankdup) (exec_empty exec_do*while (print_char char_shove string_shove integer_pop char_yankdup) exec_pop (string_dup_times integer_lte \newline)) char_flush char_allfromstring \space integer_swap char_frominteger integer_rot in1 integer_dup_items string_nth boolean_shove char_empty boolean_rot "S [+{d<" string_replace exec_empty exec_do*while () integer_lt integer_fromboolean string_setchar string_frominteger integer_rot exec_do*count (print_newline string_first string_dup_times integer_dup boolean_swap \newline boolean_yankdup char_stackdepth print_exec (boolean_dup char_swap string_empty string_frominteger string_length) exec_yankdup)), :parent-uuids nil}
#clojush/individual{:plush-genome-size 74, :errors [0 1000 1 1000 1 1000 1 1000 1 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 4 1000 5 1000 5 1000 5 1000 5 1000 5 1000 6 1000 7 1000 7 1000 7 1000 7 1000 7 1000 7 1000 8 1000 8 1000 8 1000 8 1000 9 1000 9 1000 9 1000 9 1000 9 1000 9 1000 9 1000 10 1000 10 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 12 1000 12 1000 12 1000 13 1000 14 1000 14 1000 14 1000 14 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 16 1000 16 1000 16 1000 17 1000 17 1000 17 1000 17 1000 17 1000 18 1000 18 1000 18 1000 18 1000 19 1000 19 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000], :genetic-operators :random, :generation 0, :push-program-size 88, :total-error 101054, :genome [{:close 2, :instruction integer_flush} {:close 0, :instruction print_char} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction char_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction string_pop} {:close 0, :instruction char_isdigit} {:close 0, :instruction exec_y} {:close 1, :instruction string_rest} {:close 0, :instruction char_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction char_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_min} {:close 0, :instruction string_contains} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_swap} {:close 1, :instruction char_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction exec_while} {:close 1, :instruction char_iswhitespace} {:close 1, :instruction integer_rot} {:close 0, :instruction string_indexofchar} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction char_swap} {:close 0, :instruction string_rot} {:close 0, :instruction print_char} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction string_fromboolean} {:close 1, :instruction string_emptystring} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction string_first} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction string_length} {:close 0, :instruction string_shove} {:close 0, :instruction char_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup}], :uuid #uuid "00000000-0000-0000-0000-000000000000", :location 3, :program (integer_flush print_char string_parse_to_chars char_dup_items boolean_frominteger string_replacefirstchar integer_rot integer_eq exec_shove () string_pop char_isdigit exec_y (string_rest) char_rot boolean_and exec_eq char_dup_items integer_empty boolean_dup_items exec_pop (boolean_and integer_fromstring integer_min boolean_dup exec_string_iterate (integer_dec boolean_flush string_stackdepth string_parse_to_chars integer_min string_contains exec_yankdup integer_yankdup boolean_frominteger) exec_do*times (integer_flush integer_inc exec_eq) exec_rot () (integer_shove string_replacefirstchar integer_empty integer_fromstring exec_pop (exec_do*times (string_swap char_yank) integer_gte) string_replacefirstchar exec_while (char_iswhitespace) integer_rot) (string_indexofchar boolean_yankdup) char_swap string_rot print_char integer_max print_integer string_fromboolean string_emptystring) integer_dup_items boolean_dup_items string_first exec_stackdepth integer_lte exec_eq string_length string_shove char_yankdup exec_swap (exec_flush boolean_swap) (boolean_dup)), :parent-uuids nil}
#clojush/individual{:plush-genome-size 363, :errors [103 1000 103 1000 103 1000 102 1000 102 1000 102 1000 101 1000 102 1000 102 1000 103 1000 102 1000 103 1000 102 1000 102 1000 101 1000 102 1000 101 1000 100 1000 101 1000 102 1000 101 1000 102 1000 102 1000 101 1000 101 1000 101 1000 102 1000 101 1000 102 1000 103 1000 101 1000 102 1000 102 1000 101 1000 100 1000 102 1000 101 1000 102 1000 103 1000 102 1000 100 1000 102 1000 102 1000 100 1000 102 1000 102 1000 101 1000 102 1000 100 1000 98 1000 103 1000 102 1000 100 1000 101 1000 102 1000 101 1000 101 1000 103 1000 101 1000 100 1000 98 1000 98 1000 103 1000 100 1000 99 1000 101 1000 99 1000 101 1000 101 1000 100 1000 101 1000 99 1000 99 1000 99 1000 100 1000 99 1000 99 1000 102 1000 100 1000 100 1000 100 1000 98 1000 99 1000 100 1000 100 1000 102 1000 98 1000 101 1000 102 1000 101 1000 99 1000 100 1000 100 1000 98 1000 100 1000 103 1000 98 1000 98 1000 100 1000 99 1000], :genetic-operators :random, :generation 0, :push-program-size 428, :total-error 110088, :genome [{:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction string_take} {:close 0, :instruction exec_k} {:close 2, :instruction string_butlast} {:close 0, :instruction string_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction string_length} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_do*while} {:close 1, :instruction string_yankdup} {:close 0, :instruction string_length} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction string_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_setchar} {:close 0, :instruction string_fromboolean} {:close 1, :instruction char_flush} {:close 1, :instruction string_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_eq} {:close 0, :instruction integer_max} {:close 0, :instruction string_removechar} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_stackdepth} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_containschar} {:close 1, :instruction string_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromchar} {:close 1, :instruction string_contains} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_fromstring} {:close 0, :instruction "J`nJp"} {:close 1, :instruction boolean_yank} {:close 0, :instruction char_yankdup} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction string_split} {:close 0, :instruction print_exec} {:close 0, :instruction string_removechar} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction string_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_814} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction string_contains} {:close 0, :instruction string_replacechar} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_shove} {:close 0, :instruction char_isletter} {:close 0, :instruction string_nth} {:close 0, :instruction string_rest} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction char_yank} {:close 0, :instruction \space} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction string_eq} {:close 1, :instruction string_shove} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*times} {:close 0, :instruction string_split} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromstring} {:close 0, :instruction string_stackdepth} {:close 0, :instruction char_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_612} {:close 0, :instruction integer_fromchar} {:close 1, :instruction string_replacefirstchar} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction char_eq} {:close 1, :instruction string_butlast} {:close 0, :instruction \space} {:close 0, :instruction char_empty} {:close 0, :instruction char_dup} {:close 0, :instruction char_eq} {:close 0, :instruction char_rot} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction char_empty} {:close 0, :instruction char_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction string_stackdepth} {:close 0, :instruction char_dup_times} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction string_nth} {:close 1, :instruction string_setchar} {:close 0, :instruction exec_flush} {:close 0, :instruction string_shove} {:close 1, :instruction string_length} {:close 1, :instruction string_substring} {:close 0, :instruction exec_shove} {:close 0, :instruction string_emptystring} {:close 0, :instruction char_isletter} {:close 0, :instruction \newline} {:close 1, :instruction char_shove} {:close 0, :instruction exec_if} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction char_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction string_last} {:close 1, :instruction print_string} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction string_yank} {:close 0, :instruction string_first} {:close 0, :instruction integer_dec} {:close 0, :instruction string_replacefirst} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction string_first} {:close 0, :instruction "yrh %8-z\"7 .'"} {:close 0, :instruction integer_pop} {:close 0, :instruction string_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction char_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction string_dup} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction \space} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction "j  [E9  z"} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 1, :instruction integer_fromchar} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_dup_times} {:close 0, :instruction \space} {:close 1, :instruction string_empty} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_yankdup} {:close 0, :instruction \S} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_newline} {:close 1, :instruction char_flush} {:close 1, :instruction string_eq} {:close 1, :instruction string_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction string_empty} {:close 0, :instruction char_isdigit} {:close 0, :instruction tag_char_396} {:close 0, :instruction char_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction string_removechar} {:close 0, :instruction integer_div} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_removechar} {:close 0, :instruction integer_lt} {:close 0, :instruction string_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yank} {:close 1, :instruction char_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_max} {:close 0, :instruction char_isdigit} {:close 1, :instruction integer_dup_times} {:close 0, :instruction string_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction string_nth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_483} {:close 0, :instruction integer_fromstring} {:close 1, :instruction string_concat} {:close 0, :instruction integer_dup} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction char_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction string_occurrencesofchar} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_flush} {:close 0, :instruction string_indexofchar} {:close 0, :instruction string_indexofchar} {:close 1, :instruction string_replacefirstchar} {:close 1, :instruction char_flush} {:close 0, :instruction exec_while} {:close 0, :instruction char_yankdup} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction string_length} {:close 1, :instruction string_nth} {:close 0, :instruction integer_fromchar} {:close 0, :instruction char_dup_times} {:close 1, :instruction exec_while} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_fromchar} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction char_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_dup_times} {:close 0, :instruction string_rot} {:close 1, :instruction string_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction string_fromboolean} {:close 1, :instruction string_setchar} {:close 1, :instruction string_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction char_isletter} {:close 1, :instruction char_eq} {:close 1, :instruction exec_s} {:close 0, :instruction \space} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction string_length} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction char_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction char_dup_items} {:close 1, :instruction string_yank} {:close 1, :instruction char_isletter} {:close 0, :instruction string_emptystring} {:close 1, :instruction exec_y} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction string_last} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup_times} {:close 1, :instruction string_conjchar} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction string_indexofchar} {:close 0, :instruction char_isletter} {:close 0, :instruction string_fromchar} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_yank} {:close 1, :instruction string_replacefirst} {:close 0, :instruction exec_s} {:close 1, :instruction string_setchar} {:close 1, :instruction char_isletter} {:close 1, :instruction \space} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_replacechar} {:close 1, :instruction string_swap} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction string_removechar} {:close 0, :instruction integer_shove} {:close 1, :instruction string_indexofchar} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction string_yankdup} {:close 1, :instruction tagged_957} {:close 0, :instruction exec_when} {:close 0, :instruction char_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_char} {:close 1, :instruction print_string} {:close 0, :instruction integer_lt} {:close 0, :instruction char_empty} {:close 0, :instruction char_isdigit} {:close 1, :instruction string_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_length} {:close 0, :instruction string_replacefirst} {:close 0, :instruction char_dup} {:close 0, :instruction print_newline} {:close 0, :instruction char_dup_items} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction string_setchar} {:close 0, :instruction integer_mult} {:close 0, :instruction string_conjchar} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacechar} {:close 1, :instruction string_occurrencesofchar} {:close 1, :instruction string_reverse}], :uuid #uuid "00000000-0000-0000-0000-000000000000", :location 4, :program (exec_when (exec_k (string_take exec_k (string_butlast) () string_dup_items integer_sub integer_yankdup string_length) (string_replacefirst exec_do*while (string_yankdup) string_length boolean_xor integer_dup_items string_shove) exec_dup_items string_setchar) string_fromboolean char_flush string_dup_items boolean_invert_first_then_and boolean_pop string_eq integer_max string_removechar boolean_invert_first_then_and boolean_dup char_stackdepth string_replacefirstchar string_containschar string_flush exec_s (integer_fromchar string_contains) (boolean_empty) (print_newline exec_string_iterate (integer_dec integer_fromstring) "J`nJp" boolean_yank) char_yankdup boolean_yankdup integer_eq string_split print_exec (string_removechar boolean_or boolean_dup_times exec_when (in1) string_shove integer_yank tagged_814) integer_sub integer_add string_contains string_replacechar string_dup_items string_shove char_isletter string_nth string_rest string_fromboolean integer_lt integer_shove integer_dec char_yank \space exec_dup_times (exec_do*count () string_eq string_shove) exec_while (exec_do*times () string_split boolean_and boolean_dup integer_fromstring string_stackdepth char_frominteger integer_inc boolean_dup integer_fromstring exec_do*times (exec_swap (tag_exec_612 (integer_fromchar string_replacefirstchar) string_empty exec_dup (integer_sub char_eq string_butlast) \space char_empty char_dup char_eq char_rot exec_if () () boolean_frominteger char_empty) (char_flush integer_lt) integer_gte exec_yankdup string_stackdepth) char_dup_times integer_fromstring integer_min) exec_dup_items exec_when (exec_yankdup boolean_and) integer_gt boolean_eq exec_yankdup string_nth string_setchar exec_flush string_shove string_length string_substring exec_shove (string_emptystring char_isletter \newline char_shove) exec_if (string_parse_to_chars exec_pop (integer_lt char_empty exec_yankdup string_last) print_string) (integer_flush integer_fromboolean in1 integer_fromboolean) boolean_yankdup string_yank string_first integer_dec string_replacefirst string_parse_to_chars exec_do*range (integer_stackdepth integer_fromboolean) string_first "yrh %8-z\"7 .'" integer_pop string_frominteger boolean_invert_first_then_and char_yankdup exec_s (string_dup char_iswhitespace \space boolean_dup_items) (integer_shove "j  [E9  z") (integer_lte) exec_pop (integer_mult print_integer) integer_fromchar integer_fromstring integer_dup_times \space string_empty string_parse_to_chars exec_yankdup \S exec_stackdepth print_newline char_flush string_eq string_dup_times exec_yankdup exec_swap (integer_sub exec_pop (string_empty char_isdigit tag_char_396 char_flush exec_dup_items integer_dup_items) string_removechar) (integer_div exec_string_iterate (boolean_invert_second_then_and string_removechar integer_lt string_rot integer_gt) integer_yankdup boolean_swap string_eq boolean_invert_second_then_and integer_flush in1 exec_y (exec_yank) char_flush) integer_mult string_setchar integer_max char_isdigit integer_dup_times string_dup_items integer_dup string_nth exec_do*times (boolean_invert_first_then_and exec_pop (boolean_invert_first_then_and) integer_gte print_exec (string_replacefirstchar exec_when (tagged_483 integer_fromstring string_concat) integer_dup string_occurrencesofchar char_stackdepth boolean_eq integer_fromstring exec_yankdup integer_yankdup) string_occurrencesofchar boolean_frominteger) integer_stackdepth boolean_yank integer_flush string_indexofchar string_indexofchar string_replacefirstchar char_flush exec_while (char_yankdup integer_gt) boolean_stackdepth integer_max string_length string_nth integer_fromchar char_dup_times exec_while () integer_gte integer_dup print_newline integer_fromstring integer_mult integer_fromchar boolean_pop exec_dup (string_rest integer_lt boolean_and boolean_xor exec_while () char_yank exec_yankdup string_dup_times string_rot string_flush) boolean_yankdup exec_empty string_fromboolean string_setchar string_stackdepth boolean_or char_isletter char_eq exec_s () (\space boolean_shove integer_mod) (exec_if (integer_shove boolean_and string_parse_to_chars integer_pop integer_gt string_length boolean_invert_first_then_and boolean_dup_times integer_swap char_flush integer_lt exec_k (exec_dup_times (exec_dup_times (char_dup_items string_yank) char_isletter) string_emptystring exec_y () print_integer integer_eq) (string_last string_butlast boolean_pop integer_dup_times) string_conjchar) (exec_y (boolean_yank string_indexofchar char_isletter string_fromchar integer_fromstring integer_yank string_replacefirst) exec_s (string_setchar) (char_isletter) (\space) integer_dup_items string_replacechar string_swap) exec_noop) boolean_dup_items integer_mod string_removechar integer_shove string_indexofchar char_allfromstring string_yank integer_gte print_newline string_yankdup tagged_957 exec_when (char_flush print_integer print_char print_string) integer_lt char_empty char_isdigit string_dup_times exec_yank exec_do*times (string_stackdepth string_length string_replacefirst char_dup print_newline char_dup_items string_setchar integer_stackdepth exec_do*range (string_setchar integer_mult string_conjchar exec_when (string_replacechar string_occurrencesofchar) string_reverse))), :parent-uuids nil}
